{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/Fundme.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.24;\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./PriceConverter.sol\";\n\nerror NotOwner();\n\ncontract Fundme {\n    using PriceConverter for uint256;\n\n    mapping(address => uint256) public addressToAmountFunded;\n    address[] public funders;\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\n    address public immutable owner;\n    AggregatorV3Interface private s_priceFeed;\n\n    constructor(address priceFeedAddress) {\n        owner = msg.sender;\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    function fund() public payable {\n        // require(convertEthToUsd(msg.value) >= MINIMUM_USD, \"You need to send more ETH!\");\n        require(\n            msg.value.convertEthToUsd(s_priceFeed) >= MINIMUM_USD,\n            \"You need to send more ETH!\"\n        );\n        funders.push(msg.sender);\n        addressToAmountFunded[msg.sender] += msg.value;\n    }\n\n    modifier onlyOwner() {\n        if (msg.sender != owner) {\n            revert NotOwner();\n        }\n        _;\n    }\n\n    function withdraw() public onlyOwner {\n        for (uint256 index = 0; index < funders.length; index++) {\n            addressToAmountFunded[funders[index]] = 0;\n        }\n        funders = new address[](0);\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSuccess, \"Withdraw Failed!!\");\n    }\n\n    fallback() external payable {\n        fund();\n    }\n\n    receive() external payable {\n        fund();\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.24;\n\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function getEthToUsdPrice(\n        AggregatorV3Interface dataFeed\n    ) internal view returns (uint256) {\n        uint8 decimals = dataFeed.decimals();\n        (, int256 answer, , , ) = dataFeed.latestRoundData();\n        return uint256(answer) * (10 ** (18 - decimals));\n    }\n\n    function convertEthToUsd(\n        uint256 ethAmount,\n        AggregatorV3Interface dataFeed\n    ) internal view returns (uint256) {\n        uint256 currentEthPrice = getEthToUsdPrice(dataFeed);\n        return (ethAmount * currentEthPrice) / 1e18;\n    }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}